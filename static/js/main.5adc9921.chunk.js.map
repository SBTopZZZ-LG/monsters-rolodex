{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-bar/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","item","id","name","email","CardList","list","filter","monster","toLowerCase","includes","prefix","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","target","value","state","monsters","fetch","then","response","json","users","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAAAC,GAChB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,4BACtB,mCAAML,EAAMI,KAAKE,KAAjB,OACA,kCAAKN,EAAMI,KAAKG,MAAhB,WCHKC,EAAW,SAAAR,GACpB,OAAO,qBAAKC,UAAU,YAAf,SAECD,EAAMS,KAAKC,QAAO,SAAAC,GAAO,OAAIA,EAAQL,KAAKM,cAAcC,SAASb,EAAMc,OAAOF,kBAAgBG,KAAI,SAAAJ,GAAO,OAAI,cAAC,EAAD,CAAMP,KAAMO,UCJxHK,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OAAQ,uBAAOjB,UAAU,SAASkB,KAAK,SAASF,YAAaA,EACzDG,SAAUF,MCkCHG,G,wDAjCb,aAAe,IAAD,8BACZ,gBAmBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAET,OAAQQ,EAAEE,OAAOC,SAlBjC,EAAKC,MAAQ,CACXC,SAAU,GACVb,OAAQ,IALE,E,qDAWd,WAAqB,IAAD,OAClBc,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CAAEI,SAAUK,S,oBAShC,WACE,OAAQ,sBAAK/B,UAAU,MAAf,UACN,kDACA,cAAC,EAAD,CAAWgB,YAAY,iBAAiBC,aAAce,KAAKf,eAC3D,cAAC,EAAD,CAAUT,KAAMwB,KAAKP,MAAMC,SAAUb,OAAQmB,KAAKP,MAAMZ,gB,GA7B5CoB,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5adc9921.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => {\r\n    return <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.item.id}?set=set2&size=180x180`} />\r\n        <h3> {props.item.name} </h3>\r\n        <p> {props.item.email} </p>\r\n    </div>\r\n}","import React from 'react'\r\nimport './card-list.styles.css'\r\nimport { Card } from '../card/card.component'\r\n\r\nexport const CardList = props => {\r\n    return <div className='card-list'>\r\n        {\r\n            props.list.filter(monster => monster.name.toLowerCase().includes(props.prefix.toLowerCase())).map(monster => <Card item={monster} />)\r\n        }\r\n    </div>\r\n}","import React from \"react\"\nimport \"./search-box.styles.css\"\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    return (<input className='search' type='search' placeholder={placeholder}\n        onChange={handleChange} />);\n}","import React, { Component } from 'react'\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-bar/search-box.component'\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      monsters: [],\n      prefix: ''\n    }\n  }\n\n  // Is called only once after the component is mounted (Note: Mounted does not mean that the control is visible to user)\n  // Also known as Life-cycle method\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {\n        this.setState({ monsters: users })\n      })\n  }\n\n  // Arrow function because to assign 'this' of this function to this class, if not arrow function, put 'this.handleChange = this.handleChange.bind(this)' in constructor\n  handleChange = e => {\n    this.setState({ prefix: e.target.value })\n  }\n\n  render() {\n    return (<div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder=\"Search by name\" handleChange={this.handleChange} />\n      <CardList list={this.state.monsters} prefix={this.state.prefix} />\n    </div>)\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}